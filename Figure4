Figure 4

#G4Grinder - predicting G-quadruplex sequences
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(GenomicRanges)
library(IRanges)
library(org.Hs.eg.db)
library(dplyr)
library(GenomicFeatures)
library(readxl)

txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene 

#Get promoters
prs <- promoters(genes(txdb), upstream = 1000, downstream = 1000)

TGFB_genes <- read_excel("TGFB_genes.xlsx") #genes differentially expressed in EMT - identified using Seurat

#make dataframe with  entrezid (for TGFB_DEGS)
#First, use all markers command in seurat to find markers. Export as dataframe (ie. TGFB_DEGS)
library(AnnotationDbi)
geneid <- AnnotationDbi::select(org.Hs.eg.db, sample_markers$gene,columns = 'ENTREZID', 
                                keytype='ALIAS', multiVals = "filter")

##Find promoters of genes of interest and make gene name come up as a column.
dge_prs <- as.data.frame(prs[prs$gene_id %in% geneid$EntrezID]) 
merge(dge_prs, sample_markers, by.x = "gene_id", by.y = "ENTREZID")

#for markers from seurat
dge_prs <- as.data.frame(prs[prs$gene_id %in% geneid$ENTREZID]) 

#Import bed file 
G4_hg38 <- read.table("/Volumes/TOSHIBA EXT/Endothelial cells/G4_PQSM3a_cat_40.bed", header = T,
                      col.names = c("chr", "start", "end","sequence","score","strand"))

G4_dd <- G4_hg38 %>%
  dplyr::mutate(chr = paste("chr", chr, sep = ""))

#Create a function (ie. create_grange)
create_grange <- function(x) {
  GRanges(seqnames = x$chr, ranges = IRanges(x$start, x$end), strand = x$strand, score = x$score, sequence = x$sequence)
}

#Make Grinder file in Grange 
G4Grinder_GR <- create_grange(G4_dd)

make_grange <- function(x) {
  GRanges(seqnames = x$seqnames, ranges = IRanges(x$start, x$end), strand = x$strand, score = x$score, sequence = x$sequence)
}

G4_dd_prom <- make_grange(dge_prs)

#Overlap Grinder file with promoters of genes of interest
subset_overlap <- subsetByOverlaps(G4Grinder_GR, G4_dd_prom)

#annotate for gene id
library(ChIPpeakAnno)
annoData <- toGRanges(TxDb.Hsapiens.UCSC.hg38.knownGene, feature = "gene")
subset_overlap_anno <- annotatePeakInBatch(subset_overlap, AnnotationData = annoData)
subset_overlap_anno <- addGeneIDs(annotatedPeak = subset_overlap_anno, orgAnn = "org.Hs.eg.db", feature_id_type = "entrez_id", IDs2Add = "symbol")
head(subset_overlap_anno)
length(subset_overlap_anno)

TGFB_samples_G4s <- as.data.frame(subset_overlap_anno)


#List of genes and expression data that have G4s, without duplicates 
TGFB_samples_G4_exp <- sample_markers %>%
  dplyr::filter(gene %in% TGFB_samples_G4s$symbol)



#Gene ontology analysis

library(devtools)
library(enrichR)
library(readr)
listEnrichrSites()
setEnrichrSite("EnrichR")
websiteLive <- TRUE
dbs <- listEnrichrDbs()

if (is.null(dbs)) websiteLive <- FALSE
if (websiteLive) head(dbs)

dbs_short <- c("GO_Molecular_Function_2021", "GO_Biological_Process_2021", 
               "GO_Cellular_Component_2021", "KEGG_2021_Human", "Reactome_2015",
               "MSigDB_Hallmark_2020")

orig_gene_list <- TGFB_samples_G4_exp$avg_log2FC
names(orig_gene_list) <- TGFB_samples_G4_exp$gene
gene_list <- sort(orig_gene_list, decreasing = TRUE)

organism = "org.Hs.eg.db"
library(organism, character.only = TRUE)
library(clusterProfiler)

#Figure 4b
gse <- gseGO(geneList = gene_list, ont = "ALL", keyType = "ALIAS",
             nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 0.05,
             verbose = TRUE, OrgDb = organism, pAdjustMethod = "none")
             
dotplot(gse, x = "GeneRatio", color = "pvalue",
showCategory = 5, split = ".sign", font.size = 10) +
  theme(text = element_text(size = 14))


#Figure 4c
keg <- if (websiteLive) enriched[["KEGG_2021_Human"]]
if (websiteLive) plotEnrich(keg, showTerms = 20, numChar = 40, 
                            y = "Count", orderBy = "P.value") +theme(text = element_text(size = 14))


#Figure 4d
library(dplyr)
library(Seurat)
library(patchwork)

seurat_combined[["percent.mt"]] <- PercentageFeatureSet(seurat_combined, pattern = "^MT-")
seurat_combined <- subset(seurat_combined, subset = nFeature_RNA > 200 & nFeature_RNA < 80000 & percent.mt < 10) #based on above two plots 
normdata <- NormalizeData(seurat_combined, normalization.method = "LogNormalize", scale.factor = 10000)

#add sample names
samples <- c(SBO01 = "HMLE", SBO02 = "4 d TGF-β", SBO03 = "8 d TGF-β", SBO04 = "12 d TGF-β", SBO05 = "mesHMLE", 
             SBO06 = "4 d TGF-β & PDS", SBO07 = "8 d TGF-β & PDS", SBO08 = "12 d TGF-β & PDS", 
             SBO09 = "4 d PDS", SBO10 = "8 d PDS", SBO11 = "12 d PDS", SBO12 = "HMLE")
             
names <- as.character(samples[normdata$Cell.Assignment])
normdata <- AddMetaData(normdata, metadata = names, col.name = 'sample')

#Subset for HMLE, 4 d TGF-β, 8 d TGF-β, 12 d TGF-β, mesHMLE samples
hmle <- subset(x = normdata, subset = sample == c('HMLE'))
four <- subset(x = normdata, subset = sample == c('4 d PDS'))
eight<- subset(x = normdata, subset = sample == c('8 d PDS'))
twelve <- subset(x = normdata, subset = sample == c('12 d PDS'))
ALL <- merge(hmle, y=c(four, eight, twelve))

var_features <- FindVariableFeatures(ALL, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(var_features)
scaled_data <- ScaleData(var_features)
dim_red <- RunPCA(scaled_data, features = VariableFeatures(object = scaled_data))
print(dim_red[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(dim_red, dims = 1:2, reduction = "pca")
DimPlot(dim_red, reduction = "pca")
DimHeatmap(dim_red, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(dim_red, dims = 1:9, cells = 500, balanced = TRUE)

#Dimensionality of the dataset
dim_red <- JackStraw(dim_red, num.replicate = 100)
dim_red <- ScoreJackStraw(dim_red, dims = 1:18)

#Cluster the cells
SCdata <- FindNeighbors(dim_red, dims = 1:18)
SCdata <- FindClusters(SCdata, resolution = 0.5)
SCdata <- RunUMAP(SCdata, dims = 1:18)
SCdata <- RunTSNE(SCdata, dims = 1:18)


G4_samples_G4_exp %>%
  top_n(n = 15, wt = avg_log2FC) -> top15

DotPlot(SCdata, features = features, group.by = "sample") + coord_flip() + xlab('Gene Names') +  ylab('Sample') +
  scale_colour_gradient2(low = "#a50026", mid = "#f7f7f7", high = "#4575b4")


#Figure 4e
library(Seurat)
library(data.table)
library(readr)
library(GSEABase)
library(singscore)
library(ggplot2)
library(tidyr)
library(plyr)
library(ggrepel)
library(plotly)
library(BiocParallel)
library(edgeR)
library(reshape)
library(magrittr)
library(ggsci)
library(scater)
library(org.Hs.eg.db)
library(RColorBrewer)
library(ggsignif)

SCdata <- DietSeurat(suppressMessages(UpdateSeuratObject(SCdata)))
sce <- as.SingleCellExperiment(SCdata, assay = "RNA")
test <- mapIds(org.Hs.eg.db, keys = rownames(sce), keytype = "SYMBOL", column = "ENTREZID")
rownames(sce) <- uniquifyFeatureNames(rownames(sce), test)
seurat <- Seurat::as.Seurat(sce)
DefaultAssay(seurat) <- 'RNA'
seurat <- NormalizeData(seurat)
SC_matrix <- as.matrix(GetAssayData(seurat, slot = "data")) 
sum_exp <- SummarizedExperiment(SC_matrix)
rankData <- rankGenes(sum_exp)
scoredf <- simpleScore(rankData, upSet = tgfb_gs_up, downSet = tgfb_gs_dn)
plotDispersion(scoredf, isInteractive = FALSE)
scoredf$Sample <- c(seurat@meta.data$sample)
scoredf$Sample <- factor(scoredf$Sample, levels= c("HMLE", "4 d PDS", "8 d PDS", "12 d PDS"))

ggplot(scoredf, aes(x = Sample, y= TotalScore, fill = Sample)) +
    geom_boxplot() +
    xlab("Sample") +
    ylab("EMT Score") +
    ggtitle("EMT Score") +
    scale_fill_brewer(palette = "Blues") +
  geom_jitter(color="black", size=0.2, alpha=0.3) +
    theme_minimal() +
    theme(plot.title = element_blank(),
          axis.line = element_line(colour = "black"),legend.position = "none", panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          text = element_text(size = 24), axis.text.x=element_text(angle = 45, hjust = 1)) +
geom_signif(comparisons = list(c("HMLE", "4 d PDS"), c("HMLE", "8 d PDS"),
                               c("HMLE", "12 d PDS")),
            test = "wilcox.test", 
            map_signif_level = c("****"=0.0001 ,"***"=0.001,"**"=0.01,"*"=0.05),
            textsize = 5, vjust = 0.5, tip_length = 0.01,
            step_increase = 0.08) + theme(text = element_text(size = 22))



